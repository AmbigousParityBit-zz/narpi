package NARPImage

import (
	"image/color"
	"log"
	"strings"
	"testing"
)

func _TestRunesArrayFromTestImages(t *testing.T) {
	pstfix := []string{
		"1.png", // 1 - "E"; 2 - "|" on black background
		"2.png",
		"1.jpg",
		"2.jpg",
	}

	prf := "./testimages/testrunes/testrunes"
	narpi := NARPImage{}

	for _, v := range pstfix {
		fnm := prf + v
		if strings.Index(v, "png") == len(v)-3 {
			err := narpi.ConstructFromPngFile(fnm, false)
			if err != nil {
				t.Fatalf("problem with constructing NARPImage from png file")
			}
			log.Printf("constructed NARPImage from png file <%v>", fnm)
			narpi.Print()
		}
		if strings.Index(v, "jpg") == len(v)-3 {
			err := narpi.ConstructFromJpgFile(fnm, false)
			if err != nil {
				t.Fatalf("problem with constructing NARPImage from jpg file")
			}
			log.Printf("constructed NARPImage from jpg file <%v>", fnm)
			narpi.Print()
		}
	}
}

func Test_getRGBA8(t *testing.T) {
	type args struct {
		imageClr color.Color
	}
	tests := []struct {
		name  string
		args  args
		want  uint8
		want1 uint8
		want2 uint8
	}{
		{"getRGBA8::", args{color.RGBA64{0x1111, 0x4949, 0xf0f, 0x7500}}, 0x11, 0x49, 0xf},
		{"getRGBA8::", args{color.RGBA64{0x5c5c, 0x3a3a, 0xabab, 0x7471}}, 0x5c, 0x3a, 0xab},
		{"getRGBA8::", args{color.RGBA64{0xeaea, 0xdede, 0xc3c3, 0xc854}}, 0xea, 0xde, 0xc3},
		{"getRGBA8::", args{color.RGBA64{0x1919, 0xa4a4, 0xe1e1, 0x5622}}, 0x19, 0xa4, 0xe1},
		{"getRGBA8::", args{color.RGBA64{0x8282, 0x9494, 0x9090, 0x5eb8}}, 0x82, 0x94, 0x90},
		{"getRGBA8::", args{color.RGBA64{0x1313, 0x7979, 0x7f7f, 0x7152}}, 0x13, 0x79, 0x7f},
		{"getRGBA8::", args{color.RGBA64{0xcccc, 0x2020, 0xf3f3, 0xb165}}, 0xcc, 0x20, 0xf3},
		{"getRGBA8::", args{color.RGBA64{0x5c5c, 0x1b1b, 0x3535, 0x3b8}}, 0x5c, 0x1b, 0x35},
		{"getRGBA8::", args{color.RGBA64{0x4d4d, 0x303, 0xf6f6, 0xa3cb}}, 0x4d, 0x3, 0xf6},
		{"getRGBA8::", args{color.RGBA64{0xfbfb, 0x101, 0xd0d0, 0x862e}}, 0xfb, 0x1, 0xd0},
		{"getRGBA8::", args{color.RGBA64{0xdddd, 0x7e7e, 0xfdfd, 0xa592}}, 0xdd, 0x7e, 0xfd},
		{"getRGBA8::", args{color.RGBA64{0xacac, 0x1818, 0xeeee, 0x9702}}, 0xac, 0x18, 0xee},
		{"getRGBA8::", args{color.RGBA64{0x8383, 0x4d4d, 0x9f9f, 0x58f6}}, 0x83, 0x4d, 0x9f},
		{"getRGBA8::", args{color.RGBA64{0x3333, 0xa0a, 0x1616, 0x734e}}, 0x33, 0xa, 0x16},
		{"getRGBA8::", args{color.RGBA64{0x3232, 0x1919, 0x4d4d, 0xd8c7}}, 0x32, 0x19, 0x4d},
		{"getRGBA8::", args{color.RGBA64{0x7272, 0x5555, 0x9c9c, 0x7a21}}, 0x72, 0x55, 0x9c},
		{"getRGBA8::", args{color.RGBA64{0xb2b2, 0x2323, 0xe1e1, 0xdfd5}}, 0xb2, 0x23, 0xe1},
		{"getRGBA8::", args{color.RGBA64{0x1515, 0x2525, 0x7878, 0xa31f}}, 0x15, 0x25, 0x78},
		{"getRGBA8::", args{color.RGBA64{0x6868, 0xeeee, 0xcece, 0xc31f}}, 0x68, 0xee, 0xce},
		{"getRGBA8::", args{color.RGBA64{0x1616, 0x3838, 0x7474, 0xb0f2}}, 0x16, 0x38, 0x74},
		{"getRGBA8::", args{color.RGBA64{0x2121, 0x9d9d, 0xdfdf, 0xe119}}, 0x21, 0x9d, 0xdf},
		{"getRGBA8::", args{color.RGBA64{0xb4b4, 0x505, 0x6161, 0x22de}}, 0xb4, 0x5, 0x61},
		{"getRGBA8::", args{color.RGBA64{0x7676, 0x6b6b, 0x6161, 0x9902}}, 0x76, 0x6b, 0x61},
		{"getRGBA8::", args{color.RGBA64{0xc1c1, 0x5d5d, 0xdbdb, 0xa781}}, 0xc1, 0x5d, 0xdb},
		{"getRGBA8::", args{color.RGBA64{0x3131, 0xc6c6, 0x3333, 0x24e9}}, 0x31, 0xc6, 0x33},
		{"getRGBA8::", args{color.RGBA64{0x3838, 0xa7a7, 0x3e3e, 0x64d4}}, 0x38, 0xa7, 0x3e},
		{"getRGBA8::", args{color.RGBA64{0xf2f2, 0xbbbb, 0xb0b0, 0x7833}}, 0xf2, 0xbb, 0xb0},
		{"getRGBA8::", args{color.RGBA64{0x1d1d, 0x2222, 0x3232, 0xc4a3}}, 0x1d, 0x22, 0x32},
		{"getRGBA8::", args{color.RGBA64{0x4545, 0xf4f4, 0xc3c3, 0x62bd}}, 0x45, 0xf4, 0xc3},
		{"getRGBA8::", args{color.RGBA64{0x3e3e, 0x7d7d, 0xbfbf, 0x4fd2}}, 0x3e, 0x7d, 0xbf},
		{"getRGBA8::", args{color.RGBA64{0x3838, 0x8d8d, 0xafaf, 0x1ac9}}, 0x38, 0x8d, 0xaf},
		{"getRGBA8::", args{color.RGBA64{0xd0d0, 0x9090, 0x5555, 0xb2bf}}, 0xd0, 0x90, 0x55},
		{"getRGBA8::", args{color.RGBA64{0xd9d9, 0x7979, 0x6b6b, 0xaf7}}, 0xd9, 0x79, 0x6b},
		{"getRGBA8::", args{color.RGBA64{0x8484, 0x3737, 0x6969, 0x432d}}, 0x84, 0x37, 0x69},
		{"getRGBA8::", args{color.RGBA64{0xf4f4, 0x5f5f, 0xe4e4, 0x1614}}, 0xf4, 0x5f, 0xe4},
		{"getRGBA8::", args{color.RGBA64{0x8787, 0xd5d5, 0x1212, 0xec81}}, 0x87, 0xd5, 0x12},
		{"getRGBA8::", args{color.RGBA64{0x2f2f, 0x2d2d, 0xc4c4, 0x4cfb}}, 0x2f, 0x2d, 0xc4},
		{"getRGBA8::", args{color.RGBA64{0x8a8a, 0x5353, 0xfbfb, 0xeeb2}}, 0x8a, 0x53, 0xfb},
		{"getRGBA8::", args{color.RGBA64{0xf0f, 0xf3f3, 0x4f4f, 0xa3f6}}, 0xf, 0xf3, 0x4f},
		{"getRGBA8::", args{color.RGBA64{0x808, 0xf1f1, 0xd5d5, 0x6a6d}}, 0x8, 0xf1, 0xd5},
		{"getRGBA8::", args{color.RGBA64{0xcaca, 0x5d5d, 0xdbdb, 0x4b0a}}, 0xca, 0x5d, 0xdb},
		{"getRGBA8::", args{color.RGBA64{0x6b6b, 0x606, 0x1818, 0xc7bc}}, 0x6b, 0x6, 0x18},
		{"getRGBA8::", args{color.RGBA64{0x7979, 0xeded, 0x4444, 0xae57}}, 0x79, 0xed, 0x44},
		{"getRGBA8::", args{color.RGBA64{0x8585, 0xb1b1, 0x5454, 0x7562}}, 0x85, 0xb1, 0x54},
		{"getRGBA8::", args{color.RGBA64{0xbaba, 0x5757, 0x9292, 0x3604}}, 0xba, 0x57, 0x92},
		{"getRGBA8::", args{color.RGBA64{0xb3b3, 0xcece, 0xcccc, 0x6590}}, 0xb3, 0xce, 0xcc},
		{"getRGBA8::", args{color.RGBA64{0xdddd, 0x808, 0x101, 0x5767}}, 0xdd, 0x8, 0x1},
		{"getRGBA8::", args{color.RGBA64{0xabab, 0x6c6c, 0x6565, 0x4ddb}}, 0xab, 0x6c, 0x65},
		{"getRGBA8::", args{color.RGBA64{0x8686, 0x4e4e, 0x4f4f, 0xf514}}, 0x86, 0x4e, 0x4f},
		{"getRGBA8::", args{color.RGBA64{0x8787, 0xadad, 0x5656, 0x3db5}}, 0x87, 0xad, 0x56},
	}
	/*
		//used for generation of sample args
		r := rand.New(rand.NewSource(99))
		for i := 0; i < 50; i++ {
			s1 := r.Intn(0xFF)
			s2 := r.Intn(0xFF)
			s3 := r.Intn(0xFF)
			i1 := s1 * 0x101
			i2 := s2 * 0x101
			i3 := s3 * 0x101
			i4 := r.Intn(0xFFFF)

			log.Printf("{\"getRGBA8::\", args{color.RGBA64{0x%v, 0x%v, 0x%v, 0x%v}}, 0x%v, 0x%v, 0x%v},",
				strconv.FormatInt(int64(i1), 16), strconv.FormatInt(int64(i2), 16), strconv.FormatInt(int64(i3), 16),
				strconv.FormatInt(int64(i4), 16),
				strconv.FormatInt(int64(s1), 16), strconv.FormatInt(int64(s2), 16), strconv.FormatInt(int64(s3), 16))
		}
	*/
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1, got2 := getRGBA8(tt.args.imageClr)
			if got != tt.want {
				t.Errorf("getRGBA8(%v) got = %v, want %v", tt.args.imageClr, got, tt.want)
			}
			if got1 != tt.want1 {
				t.Errorf("getRGBA8(%v) got1 = %v, want %v", tt.args.imageClr, got1, tt.want1)
			}
			if got2 != tt.want2 {
				t.Errorf("getRGBA8(%v) got2 = %v, want %v", tt.args.imageClr, got2, tt.want2)
			}
		})
	}
}

func Test_colorsEqual(t *testing.T) {
	type args struct {
		imageClr  color.Color
		narpColor RGB8
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{"colorsEqual::", args{color.RGBA64{0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF}, RGB8{0xFF, 0xFF, 0xFF}}, true},
		{"colorsEqual::", args{color.RGBA64{0x1111, 0x4949, 0x9555, 0x7500}, RGB8{0x11, 0x49, 0xf}}, false},
		{"colorsEqual::", args{color.RGBA64{0xdede, 0xc3c3, 0x1d1d, 0x42d6}, RGB8{0xde, 0xc3, 0x1d}}, true},
		{"colorsEqual::", args{color.RGBA64{0xe1e1, 0x7878, 0x8282, 0xf59e}, RGB8{0xe1, 0x78, 0x82}}, true},
		{"colorsEqual::", args{color.RGBA64{0x7f7f, 0x63b7, 0xcccc, 0xf11}, RGB8{0x7f, 0xc3, 0xcc}}, false},
		{"colorsEqual::", args{color.RGBA64{0xbbbb, 0xb31d, 0xbc21, 0x16e0}, RGB8{0xbb, 0x4d, 0x3}}, false},
		{"colorsEqual::", args{color.RGBA64{0x7e7e, 0xfdfd, 0x3838, 0xb7f4}, RGB8{0x7e, 0xfd, 0x38}}, true},
		{"colorsEqual::", args{color.RGBA64{0x9d95, 0x9999, 0x8383, 0x7cd0}, RGB8{0xee, 0x99, 0x83}}, false},
		{"colorsEqual::", args{color.RGBA64{0x4c09, 0x3232, 0x1919, 0x3518}, RGB8{0xc1, 0x32, 0x19}}, false},
		{"colorsEqual::", args{color.RGBA64{0xb2b2, 0x2323, 0xe1e1, 0xdfd5}, RGB8{0xb2, 0x23, 0xe1}}, true},
		{"colorsEqual::", args{color.RGBA64{0x2525, 0x7878, 0xc2c2, 0xd295}, RGB8{0x25, 0x78, 0xc2}}, true},
		{"colorsEqual::", args{color.RGBA64{0x2cf4, 0xe2e2, 0xe119, 0xd067}, RGB8{0xce, 0xe2, 0x16}}, false},
		{"colorsEqual::", args{color.RGBA64{0x69f7, 0x505, 0x6161, 0x22de}, RGB8{0xb4, 0x5, 0x61}}, false},
		{"colorsEqual::", args{color.RGBA64{0x5d5d, 0xdbdb, 0x2929, 0x9898}, RGB8{0x5d, 0xdb, 0x29}}, true},
		{"colorsEqual::", args{color.RGBA64{0x3333, 0x2992, 0x7833, 0xd2d4}, RGB8{0x33, 0xe, 0x38}}, false},
		{"colorsEqual::", args{color.RGBA64{0x5172, 0x2222, 0xf686, 0xc4a3}, RGB8{0x1d, 0x22, 0x32}}, false},
		{"colorsEqual::", args{color.RGBA64{0xbfbf, 0x2222, 0x3838, 0xf29a}, RGB8{0xbf, 0x22, 0x38}}, true},
		{"colorsEqual::", args{color.RGBA64{0x80f8, 0xd0d0, 0x8ef5, 0x3124}, RGB8{0xe3, 0xd0, 0x90}}, false},
		{"colorsEqual::", args{color.RGBA64{0x1614, 0xac29, 0x7070, 0xbc38}, RGB8{0x37, 0x69, 0x70}}, false},
		{"colorsEqual::", args{color.RGBA64{0x6e6e, 0x2f2f, 0x2d2d, 0xa123}, RGB8{0x6e, 0x2f, 0x2d}}, true},
		{"colorsEqual::", args{color.RGBA64{0x8a8a, 0x5353, 0xfbfb, 0xeeb2}, RGB8{0x8a, 0x53, 0xfb}}, true},
		{"colorsEqual::", args{color.RGBA64{0xf3f3, 0x4f4f, 0x9a9a, 0xf611}, RGB8{0xf3, 0x4f, 0x9a}}, true},
		{"colorsEqual::", args{color.RGBA64{0xd5d5, 0xd7d7, 0xcaca, 0x4419}, RGB8{0xd5, 0xd7, 0xca}}, true},
		{"colorsEqual::", args{color.RGBA64{0x5555, 0x6b6b, 0xae57, 0x513}, RGB8{0x55, 0x6b, 0x6}}, false},
		{"colorsEqual::", args{color.RGBA64{0x8585, 0xb1b1, 0x5454, 0x7562}, RGB8{0x85, 0xb1, 0x54}}, true},
		{"colorsEqual::", args{color.RGBA64{0x5757, 0x9292, 0x3a3a, 0xe8ca}, RGB8{0x57, 0x92, 0x3a}}, true},
		{"colorsEqual::", args{color.RGBA64{0xcccc, 0xf5f5, 0xdddd, 0x701}, RGB8{0xcc, 0xf5, 0xdd}}, true},
		{"colorsEqual::", args{color.RGBA64{0xaba2, 0xf514, 0x6c6c, 0xb7ad}, RGB8{0xbe, 0xab, 0x6c}}, false},
		{"colorsEqual::", args{color.RGBA64{0xadad, 0x5656, 0xf2f2, 0xd4b7}, RGB8{0xad, 0x56, 0xf2}}, true},
		{"colorsEqual::", args{color.RGBA64{0xabab, 0xcd8b, 0x573, 0x5cfe}, RGB8{0xab, 0xf9, 0x91}}, false},
		{"colorsEqual::", args{color.RGBA64{0x7272, 0xe645, 0x1759, 0xe323}, RGB8{0x72, 0x7b, 0xd2}}, false},
		{"colorsEqual::", args{color.RGBA64{0x2020, 0xc8a1, 0x4b4b, 0xb997}, RGB8{0x20, 0x59, 0x4b}}, false},
		{"colorsEqual::", args{color.RGBA64{0xe8e8, 0xe0ed, 0x3523, 0x4f80}, RGB8{0xe8, 0xc0, 0xe6}}, false},
		{"colorsEqual::", args{color.RGBA64{0x6868, 0x1515, 0xa0a, 0xe3aa}, RGB8{0x68, 0x15, 0xa}}, true},
		{"colorsEqual::", args{color.RGBA64{0xf1f1, 0x3f3f, 0x2727, 0xc489}, RGB8{0xf1, 0x3f, 0x27}}, true},
		{"colorsEqual::", args{color.RGBA64{0xdf8b, 0xd2d2, 0xa7d8, 0xfec}, RGB8{0xb2, 0xd2, 0xdd}}, false},
		{"colorsEqual::", args{color.RGBA64{0x6d6d, 0x1e1e, 0xf0f, 0xd9d6}, RGB8{0x6d, 0x1e, 0xf}}, true},
		{"colorsEqual::", args{color.RGBA64{0x971b, 0x8e86, 0xe43f, 0xfe01}, RGB8{0x22, 0x99, 0x6b}}, false},
		{"colorsEqual::", args{color.RGBA64{0xaeae, 0x6a6a, 0xcccc, 0xb561}, RGB8{0xae, 0x6a, 0xcc}}, true},
		{"colorsEqual::", args{color.RGBA64{0x808, 0x1818, 0xe4e4, 0xf810}, RGB8{0x8, 0x18, 0xe4}}, true},
		{"colorsEqual::", args{color.RGBA64{0xbdbd, 0x9c9c, 0x5454, 0x25e1}, RGB8{0xbd, 0x9c, 0x54}}, true},
		{"colorsEqual::", args{color.RGBA64{0xa5a5, 0x6a6a, 0xd6d6, 0x94d3}, RGB8{0xa5, 0x6a, 0xd6}}, true},
		{"colorsEqual::", args{color.RGBA64{0x123a, 0xd9d9, 0xfcfc, 0xfa8d}, RGB8{0x3a, 0xd9, 0xfc}}, false},
		{"colorsEqual::", args{color.RGBA64{0xda3e, 0x2405, 0xc2f3, 0x8cb2}, RGB8{0x36, 0x66, 0x32}}, false},
		{"colorsEqual::", args{color.RGBA64{0xb7fe, 0x5353, 0xc0c0, 0x7b3c}, RGB8{0xdc, 0x53, 0xc0}}, false},
		{"colorsEqual::", args{color.RGBA64{0x5858, 0xcd47, 0xcccc, 0x9222}, RGB8{0x58, 0x95, 0xcc}}, false},
		{"colorsEqual::", args{color.RGBA64{0x490d, 0x6c64, 0x4b20, 0x91cb}, RGB8{0x9f, 0x3e, 0xd6}}, false},
		{"colorsEqual::", args{color.RGBA64{0x9595, 0x8282, 0xa6a6, 0x81f0}, RGB8{0x95, 0x82, 0xa6}}, true},
		{"colorsEqual::", args{color.RGBA64{0x3fde, 0xd5d5, 0x202, 0x8489}, RGB8{0xa8, 0xd5, 0x2}}, false},
		{"colorsEqual::", args{color.RGBA64{0xe0e0, 0xe044, 0xcaca, 0x4656}, RGB8{0xe0, 0x7f, 0xca}}, false},
		{"colorsEqual::", args{color.RGBA64{0x7f7f, 0x1414, 0x9595, 0xb32f}, RGB8{0x7f, 0x14, 0x95}}, true},
	}
	/*
		r := rand.New(rand.NewSource(99))
		for i := 0; i < 50; i++ {
			s1 := r.Intn(0xFF)
			s2 := r.Intn(0xFF)
			s3 := r.Intn(0xFF)
			i1 := s1 * 0x101
			i2 := s2 * 0x101
			i3 := s3 * 0x101
			i4 := r.Intn(0xFFFF)
			o := true

			//randomly selects samples to not be equal
			if r.Intn(2) == 0 {
				if r.Intn(2) == 0 {
					i1 = r.Intn(0xFFFF)
					o = false
				}
				if r.Intn(2) == 0 {
					i2 = r.Intn(0xFFFF)
					o = false
				}
				if r.Intn(2) == 0 {
					i3 = r.Intn(0xFFFF)
					o = false
				}
			}

			log.Printf("{\"colorsEqual::\", args{color.RGBA64{0x%v, 0x%v, 0x%v, 0x%v}, RGB8{0x%v, 0x%v, 0x%v}}, %v},",
				strconv.FormatInt(int64(i1), 16), strconv.FormatInt(int64(i2), 16), strconv.FormatInt(int64(i3), 16),
				strconv.FormatInt(int64(i4), 16),
				strconv.FormatInt(int64(s1), 16), strconv.FormatInt(int64(s2), 16), strconv.FormatInt(int64(s3), 16), o)
		}
	*/
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := colorsEqual(tt.args.imageClr, tt.args.narpColor); got != tt.want {
				t.Errorf("colorsEqual(%v, %v) = %v, want %v", tt.args.imageClr, tt.args.narpColor, got, tt.want)
			}
		})
	}
}
